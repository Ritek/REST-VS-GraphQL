test: String
newStudent: String
testStudent2: Student2
teachersClass: Teacher
classTeacher: Class
studentClass: Student


interface Person {
    id: Int
    first_name: String
    last_name: String
    email: String
}

type Student2 implements Person {
    id: Int
    class_id: Int
    first_name: String
    last_name: String
    gender: String
    email: String
}

type Teacher2 implements Person {
    id: Int
    first_name: String
    last_name: String
    email: String
    subject: String
}


    test() {
        return "Resolvers are working!";
    },
    
    testStudent2: async () => {
        let student = await Student.findOne({}).then(result => {
            let temp = result.toObject();
            console.log(typeof(temp));
            return temp;
        }).catch(error => {
            console.log(error);
            return null;
        });

        return student;
    },

    teachersClass: async () => {
        let teacher = await Teacher.findOne({}).populate('class').exec().then(result => {
            //let temp = result.toObject();
            return result;
        }).catch(error => {
            console.log(error);
            return null;
        })

        console.log(teacher);
        return teacher;
    },

    classTeacher: async () => {
        let class1 = await Class.findOne({}).populate('teacher').exec().then(result => {
            //let temp = result.toObject();
            return result;
        }).catch(error => {
            console.log(error);
            return null;
        })

        console.log(class1);
        return class1;
    },

    studentClass: async () => {
        let student = await Student.findOne({}).populate('class').exec().then(result => {
            return result;
        }).catch(error => {
            return null;
        });

        return student;
    },

    addStudent: async ({ input }) => {
        console.log(input);

        return "OK!";
    }